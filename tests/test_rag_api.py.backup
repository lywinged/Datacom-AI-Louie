"""
Tests for RAG Q&A API (Task 3.2)
"""
import pytest
from fastapi.testclient import TestClient
import sys
import os

# Add parent directory to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'backend'))

from main import app

client = TestClient(app)


def test_rag_health():
    """Test RAG health endpoint"""
    response = client.get("/api/rag/health")
    assert response.status_code == 200
    data = response.json()
    assert data["status"] == "healthy"
    assert "qdrant" in data
    assert "model" in data


def test_rag_ask_endpoint():
    """Test RAG question answering"""
    response = client.post(
        "/api/rag/ask",
        json={
            "question": "Who is Gandalf?",
            "top_k": 3
        }
    )
    assert response.status_code == 200
    data = response.json()
    assert "answer" in data
    assert "sources" in data
    assert isinstance(data["sources"], list)


def test_rag_ask_invalid_question():
    """Test RAG with empty question"""
    response = client.post(
        "/api/rag/ask",
        json={
            "question": "",
            "top_k": 3
        }
    )
    assert response.status_code == 422  # Validation error


def test_rag_ask_invalid_top_k():
    """Test RAG with invalid top_k"""
    response = client.post(
        "/api/rag/ask",
        json={
            "question": "Test question",
            "top_k": -1
        }
    )
    assert response.status_code == 422  # Validation error


def test_rag_retrieval():
    """Test document retrieval without LLM"""
    response = client.post(
        "/api/rag/retrieve",
        json={
            "query": "Gandalf wizard",
            "top_k": 5
        }
    )
    assert response.status_code == 200
    data = response.json()
    assert "results" in data
    assert isinstance(data["results"], list)
    assert len(data["results"]) <= 5


def test_rag_performance():
    """Test RAG response time"""
    import time
    start = time.time()
    response = client.post(
        "/api/rag/ask",
        json={
            "question": "What is the plot of The Lord of the Rings?",
            "top_k": 3
        }
    )
    duration = time.time() - start

    assert response.status_code == 200
    # Response should be fast (< 5 seconds)
    assert duration < 5.0


if __name__ == "__main__":
    pytest.main([__file__, "-v"])
